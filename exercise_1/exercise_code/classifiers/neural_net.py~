"""Two Layer Network."""
# pylint: disable=invalid-name
import numpy as np


class TwoLayerNet(object):
    """
    A two-layer fully-connected neural network. The net has an input dimension
    of N, a hidden layer dimension of H, and performs classification over C
    classes. We train the network with a softmax loss function and L2
    regularization on the weight matrices. The network uses a ReLU nonlinearity
    after the first fully connected layer.

    In other words, the network has the following architecture:

    input - fully connected layer - ReLU - fully connected layer - softmax

    The outputs of the second fully-connected layer are the scores for each
    class.
    """

    def __init__(self, input_size, hidden_size, output_size, std=1e-4):
        """
        Initialize the model. Weights are initialized to small random values and
        biases are initialized to zero. Weights and biases are stored in the
        variable self.params, which is a dictionary with the following keys:

        W1: First layer weights; has shape (D, H)
        b1: First layer biases; has shape (H,)
        W2: Second layer weights; has shape (H, C)
        b2: Second layer biases; has shape (C,)

        Inputs:
        - input_size: The dimension D of the input data.
        - hidden_size: The number of neurons H in the hidden layer.
        - output_size: The number of classes C.
        """
        self.params = {}
        self.params['W1'] = std * np.random.randn(input_size, hidden_size)
        self.params['b1'] = np.zeros(hidden_size)
        self.params['W2'] = std * np.random.randn(hidden_size, output_size)
        self.params['b2'] = np.zeros(output_size)

    def loss(self, X, y=None, reg=0.0):
        """
        Compute the loss and gradients for a two layer fully connected neural
        network.

        Inputs:
        - X: Input data of shape (N, D). Each X[i] is a training sample.
        - y: Vector of training labels. y[i] is the label for X[i], and each
          y[i] is an integer in the range 0 <= y[i] < C. This parameter is
          optional; if it is not passed then we only return scores, and if it is
          passed then we instead return the loss and gradients.
        - reg: Regularization strength.

        Returns:
        If y is None, return a matrix scores of shape (N, C) where scores[i, c]
        is the score for class c on input X[i].

        If y is not None, instead return a tuple of:
        - loss: Loss (data loss and regularization loss) for this batch of
          training samples.
        - grads: Dictionary mapping parameter names to gradients of those
          parameters  with respect to the loss function; has the same keys as
          self.params.
        """
        # pylint: disable=too-many-locals
        # Unpack variables from the params dictionary
        W1, b1 = self.params['W1'], self.params['b1']
        W2, b2 = self.params['W2'], self.params['b2']
        N, _ = X.shape

        # Compute the forward pass
        scores = None
        ########################################################################
        # TODO: Perform the forward pass, computing the class scores for the   #
        # input. Store the result in the scores variable, which should be an   #
        # array of shape (N, C).                                               #         
        ########################################################################

        layer_1 = X.dot(W1) + b1
        relu = np.maximum(layer_1, 0)

        scores = relu.dot(W2) + b2
        
        ########################################################################
        #                              END OF YOUR CODE                        #
        ########################################################################

        # If the targets are not given then jump out, we're done
        if y is None:
            return scores

        # Compute the loss
        loss = None
        ########################################################################
        # TODO: Finish the forward pass, and compute the loss. This should     #
        # include both the data loss and L2 regularization for W1 and W2. Store#
        # the result in the variable loss, which should be a scalar. Use the   #
        # Softmax classifier loss. So that your results match ours, multiply   #
        # the regularization loss by 0.5                                       #
        ########################################################################

        images = X.shape[0]
        
        exps = np.exp(scores - np.max(scores, axis=1, keepdims=True))
        exps /= np.sum(exps, axis=1, keepdims=True)

        loss = np.sum(-np.log(exps[range(images), y])) / images
        loss += 0.5 * reg * (np.sum(W1 * W1) + np.sum(W2 * W2))
           
        ########################################################################
        #                              END OF YOUR CODE                        #
        ########################################################################

        # Backward pass: compute gradients
        grads = {}
        ########################################################################
        # TODO: Compute the backward pass, computing the derivatives of the    #
        # weights and biases. Store the results in the grads dictionary. For   #
        # example, grads['W1'] should store the gradient on W1, and be a matrix#
        # of same size                                                         #
        ########################################################################

        exps[range(images),y] -= 1
        exps /= images
        # backpropagate, the output of the middle layer should be the weight times probabilities (output layer)
        out_1ayer_1 = exps.dot(W2.T) 
        # reverse the max() gate
        out_1ayer_1[layer_1 <= 0] = 0
        grads['W2'] = relu.T.dot(exps) + reg * W2
        grads['W1'] = X.T.dot(out_1ayer_1) + reg * W1
        grads['b2'] = np.sum(exps, axis=0)
        grads['b1'] = np.sum(out_1ayer_1, axis=0)
        
        ########################################################################
        #                              END OF YOUR CODE                        #
        ########################################################################

        return loss, grads

    def train(self, X, y, X_val, y_val,
              learning_rate=1e-3, learning_rate_decay=0.95,
              reg=1e-5, num_iters=100,
              batch_size=200, verbose=False):
        """
        Train this neural network using stochastic gradient descent.

        Inputs:
        - X: A numpy array of shape (N, D) giving training data.
        - y: A numpy array f shape (N,) giving training labels; y[i] = c means
          that X[i] has label c, where 0 <= c < C.
        - X_val: A numpy array of shape (N_val, D) giving validation data.
        - y_val: A numpy array of shape (N_val,) giving validation labels.
        - learning_rate: Scalar giving learning rate for optimization.
        - learning_rate_decay: Scalar giving factor used to decay the learning
          rate after each epoch.
        - reg: Scalar giving regularization strength.
        - num_iters: Number of steps to take when optimizing.
        - batch_size: Number of training examples to use per step.
        - verbose: boolean; if true print progress during optimization.
        """
        # pylint: disable=too-many-arguments, too-many-locals
        num_train = X.shape[0]
        iterations_per_epoch = max(num_train // batch_size, 1)

        # Use SGD to optimize the parameters in self.model
        loss_history = []
        train_acc_history = []
        val_acc_history = []

        for it in range(num_iters):
            X_batch = None
            y_batch = None

            ####################################################################
            # TODO: Create a random minibatch of training data and labels,     #
            # storing hem in X_batch and y_batch respectively.                 #
            ####################################################################

            random_choice = np.random.choice(num_train, batch_size, replace=True)
            X_batch = X[random_choice]
            y_batch = y[random_choice]
            
            ######################################################################
            #                             END OF YOUR CODE                     #
            ####################################################################

            # Compute loss and gradients using the current minibatch
            loss, grads = self.loss(X_batch, y=y_batch, reg=reg)
            loss_history.append(loss)

            ####################################################################
            # TODO: Use the gradients in the grads dictionary to update the    #
            # parameters of the network (stored in the dictionary self.params) #
            # using stochastic gradient descent. You'll need to use the        #
            # gradients stored in the grads dictionary defined above.          #
            ####################################################################

            for param in self.params:
                self.params[param] -= grads[param] * learning_rate
            
            ####################################################################
            #                             END OF YOUR CODE                     #
            ####################################################################

            if verbose and it % 100 == 0:
                print('iteration %d / %d: loss %f' % (it, num_iters, loss))

            # Every epoch, check train and val accuracy and decay learning rate.
            if it % iterations_per_epoch == 0:
                # Check accuracy
                train_acc = (self.predict(X_batch) == y_batch).mean()
                val_acc = (self.predict(X_val) == y_val).mean()
                train_acc_history.append(train_acc)
                val_acc_history.append(val_acc)

                # Decay learning rate
                learning_rate *= learning_rate_decay

        return {
            'loss_history': loss_history,
            'train_acc_history': train_acc_history,
            'val_acc_history': val_acc_history,
        }

    def predict(self, X):
        """
        Use the trained weights of this two-layer network to predict labels for
        data points. For each data point we predict scores for each of the C
        classes, and assign each data point to the class with the highest score.

        Inputs:
        - X: A numpy array of shape (N, D) giving N D-dimensional data points to
          classify.

        Returns:
        - y_pred: A numpy array of shape (N,) giving predicted labels for each
          of the elements of X. For all i, y_pred[i] = c means that X[i] is
          predicted to have class c, where 0 <= c < C.
        """
        y_pred = None

        ########################################################################
        # TODO: Implement this function; it should be VERY simple!             #
        ########################################################################

        layer_1 = X.dot(self.params['W1']) + self.params['b1']
        relu = np.maximum(layer_1, 0)

        scores = relu.dot(self.params['W2']) + self.params['b2']
        y_pred = np.argmax(scores, axis=1)
        
        ########################################################################
        #                              END OF YOUR CODE                        #
        ########################################################################

        return y_pred


def neuralnetwork_hyperparameter_tuning(X_train, y_train, X_val, y_val):
    best_net = None # store the best model into this 

    ############################################################################
    # TODO: Tune hyperparameters using the validation set. Store your best     #
    # trained model in best_net.                                               #
    #                                                                          #
    # To help debug your network, it may help to use visualizations similar to #
    # the  ones we used above; these visualizations will have significant      #
    # qualitative differences from the ones we saw above for the poorly tuned  #
    # network.                                                                 #
    #                                                                          #
    # Tweaking hyperparameters by hand can be fun, but you might find it useful#
    # to  write code to sweep through possible combinations of hyperparameters #
    # automatically like we did on the previous exercises.                     #
    ############################################################################

    import time

    best_val = -1
    learning_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]
    regularization_strengths = [1e-9, 2e-9, 3e-9, 4e-9, 5e-9, 6e-9, 7e-9, 8e-9, 9e-9, 10e-9, 11e-9, 12e-9, 13e-9, 14e-9, 15e-9, 16e-9, 17e-9, 18e-9, 19e-9, 20e-9]
    iterations = [150, 1500, 5000, 10000]

    ############################################################################
    # TODO:                                                                    #
    # Write code that chooses the best hyperparameters by tuning on the        #
    # validation set. For each combination of hyperparameters, train a         #
    # classifier on the training set, compute its accuracy on the training and #
    # validation sets, and  store these numbers in the results dictionary.     #
    # In addition, store the best validation accuracy in best_val and the      #
    # Softmax object that achieves this accuracy in best_softmax.              #                                      #
    #                                                                          #
    # Hint: You should use a small value for num_iters as you develop your     #
    # validation code so that the classifiers don't take much time to train;   # 
    # once you are confident that your validation code works, you should rerun #
    # the validation code with a larger value for num_iters.                   #
    ############################################################################
    results = {} 
    input_size = X_train.shape[1]
    hidden_size = 50
    num_classes = 10
    
    iteration = 0;
    learning_rate_range = learning_rates #np.arange(learning_rates[0], learning_rates[1], 0.00001)
    regularization_strength_range = regularization_strengths #np.arange(regularization_strengths[0], regularization_strengths[1], 0.001)
    iterations_range = iterations #np.arange(iterations[0], iterations[1], 500)
    all_iterations = len(learning_rate_range) * len(regularization_strength_range) * len(iterations_range)
    
    all_time = 0.0
        
    with open('hyperparams.txt', 'w') as f:
        f.write('')
        
    for learning_rate in learning_rate_range:
        for regularization_strength in regularization_strength_range:
            for num_iters in iterations_range:
                print()
                print('**************************************************************************************************')
                print()
                print('Starting new iteration')
                tic = time.time()
                net = TwoLayerNet(input_size, hidden_size, num_classes)
                print('Training')
                training_result = net.train(X_train, y_train, X_val, y_val, learning_rate=learning_rate, reg=regularization_strength, num_iters=num_iters);

                print('Predicting')
                y_pred_train = net.predict(X_train)
                y_pred_val = net.predict(X_val)

                training_accuracy = np.mean(y_train == y_pred_train)
                validation_accuracy = np.mean(y_val == y_pred_val)

                results[(learning_rate, regularization_strength)] = (training_accuracy, validation_accuracy)

                print(f'Training accuracy: {training_accuracy} <-> {validation_accuracy} :Validation accuracy')

                if validation_accuracy > best_val:
                    with open('hyperparams.txt', 'a') as f:
                        f.write(f'Learning rate: {learning_rate},\t Regularization strength: {regularization_strength}, \t Iterations: {num_iters} \n')
                    print(f'+++++++ New best! ++++++++ {learning_rate} ++++++++ {regularization_strength} +++++++ {num_iters} ')
                    best_val = validation_accuracy
                    best_net = net

                toc = time.time()
                duration = toc - tic
                iteration += 1
                all_time += duration
                print(f'Iteration {iteration} of {all_iterations} took {duration}')
                print(f'Average time: {all_time / iteration}')
                print(f'Total time: {all_time}')
                print(f'Remaining time: {(all_time / iteration) * (all_iterations - iteration)}')
    
    ############################################################################
    #                               END OF YOUR CODE                           #
    ############################################################################
    return best_net
